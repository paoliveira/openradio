apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: '../constants.gradle'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    def versionPropsFile = file('version.properties')
    def code = 1
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        code = versionProps['VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println "Version code:" + code

    def signConfFile = file("../shared/sign.properties")
    def storeFileProp
    def aliasProp
    def pwdProp
    if (signConfFile.canRead()) {
        Properties signProps = new Properties()
        signProps.load(new FileInputStream(signConfFile))
        storeFileProp = signProps['file'].toString()
        aliasProp = signProps['alias'].toString()
        pwdProp = signProps['pwd'].toString()
    } else {
        throw new GradleException("Could not read sign.properties !")
    }

    signingConfigs {
        config {
            keyAlias aliasProp
            keyPassword pwdProp
            storeFile file(storeFileProp)
            storePassword pwdProp
        }
    }

    defaultConfig {
        applicationId project.ext.applicationId
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode code
        versionName project.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            // TODO:
//            minifyEnabled true
//            shrinkResources true
            signingConfig signingConfigs.config
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    aaptOptions {
        cruncherEnabled = true
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "28.+"
            }
        }
        if (requested.group == "androidx") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "${targetSdk}.+"
            }
        }
    }
}

dependencies {
    implementation project(':shared')

    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation 'com.github.bumptech.glide:glide:4.3.1'

    androidTestImplementation(
            "androidx.test.espresso:espresso-core:$espressoVersion",
            {exclude group: 'com.android.support', module: 'support-annotations'}
    )

    testImplementation "junit:junit:$junitVersion"
    testImplementation group: "org.json", name: "json", version: "$jsonTestVersion"
}

tasks.whenTaskAdded { task ->
    if (task.name == "signReleaseBundle") {
        task.doLast() {
            println "Get And Increment Version code"

            def versionPropsFile = file('version.properties')
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)

                println "Version code incremented to " + code
            } else {
                throw new GradleException("Could not read version.properties !")
            }
        }
    }
}
