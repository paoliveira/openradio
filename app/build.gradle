apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.google.firebase.crashlytics"
apply from: "../constants.gradle"

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    def versionPropsFile = file('version.properties')
    def code = 1
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        code = versionProps['VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println "Version code:" + code

    /**
     * Sign
     */
    def storeFileProp = ""
    def aliasProp = ""
    def pwdProp = ""

    /**
     * Load constants from files
     */
    def signConfFile = file("sign.properties")
    if (signConfFile.canRead()) {
        Properties signProps = new Properties()
        signProps.load(new FileInputStream(signConfFile))
        storeFileProp = signProps['file'].toString()
        aliasProp = signProps['alias'].toString()
        pwdProp = signProps['pwd'].toString()
    } else {
        throw new GradleException("Could not read sign.properties !")
    }

    signingConfigs {
        config {
            keyAlias aliasProp
            keyPassword pwdProp
            storeFile file(storeFileProp)
            storePassword pwdProp
        }
    }

    defaultConfig {
        applicationId project.ext.applicationId
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode code
        versionName project.ext.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    aaptOptions {
        cruncherEnabled = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    implementation project(':common')
    implementation project(':common-ui')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "com.android.support:multidex:$multidexVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinxCoroutinesAndroid"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesCore"
    implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
}

tasks.whenTaskAdded { task ->
    if (task.name == "signReleaseBundle") {
        task.doLast() {
            println "Get And Increment Version code"

            def versionPropsFile = file('version.properties')
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)

                println "Version code incremented to " + code
            } else {
                throw new GradleException("Could not read version.properties !")
            }
        }
    }
}
