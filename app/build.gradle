apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: 'constants.gradle'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    def versionPropsFile = file('version.properties')
    def code = 1
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        code = versionProps['VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println "Version code:" + code

    signingConfigs {
        config {
            keyAlias project.ext.aliasProp
            keyPassword project.ext.pwdProp
            storeFile file(project.ext.storeFileProp)
            storePassword project.ext.pwdProp
        }
    }

    defaultConfig {
        applicationId project.ext.applicationId
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode code
        versionName project.ext.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [crashlytics_api_key: project.ext.apiKey]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            // TODO:
//            minifyEnabled true
//            shrinkResources true
            signingConfig signingConfigs.config
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    aaptOptions {
        cruncherEnabled = true
    }
}

dependencies {
    compileOnly "org.checkerframework:checker-compat-qual:$checkerCompatQualVersion"
    compileOnly "org.checkerframework:checker-qual:$checkerQualVersion"

    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "androidx.leanback:leanback:1.0.0"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "log4j:log4j:$log4jVersion"
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-analytics:17.4.4'
    implementation "com.google.android.gms:play-services-location:$googlePlayServicesLocationVersion"
    implementation "com.google.android.gms:play-services-auth:$googlePlayServicesAuthVersion"
    implementation "com.google.android.gms:play-services-drive:$googlePlayServicesDriveVersion"
    // https://mvnrepository.com/artifact/org.jdom/jdom2
    implementation group: 'org.jdom', name: 'jdom2', version: '2.0.6'
    implementation 'de.westnordost:countryboundaries:1.5'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-hls:$exoPlayerVersion"

    androidTestImplementation(
            "androidx.test.espresso:espresso-core:$espressoVersion",
            {exclude group: 'com.android.support', module: 'support-annotations'}
    )
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    
    testImplementation "junit:junit:$junitVersion"
    testImplementation group: "org.json", name: "json", version: "$jsonTestVersion"
}

tasks.whenTaskAdded { task ->
    if (task.name == "signReleaseBundle") {
        task.doLast() {
            println "Get And Increment Version code"

            def versionPropsFile = file('version.properties')
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)

                println "Version code incremented to " + code
            } else {
                throw new GradleException("Could not read version.properties !")
            }
        }
    }
}
